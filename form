<form id="leadForm">
    <label for="name">Nome: *</label>
    <input placeholder="Informe seu nome" type="text" id="name" name="name" required><br><br>

    <label for="email">E-mail:</label>
    <input placeholder="Informe seu email" type="email" id="email" name="email"><br><br>

    <label for="phone">Telefone/Whatsapp: *</label>
    <input type="tel" id="phone" name="phone" placeholder="Informe seu telefone" required><br><br>

    <label for="birthdate">Data de Nascimento: *</label>
    <input type="text" id="birthdate" name="birthdate" placeholder="DD/MM/AAAA" required pattern="\d{2}/\d{2}/\d{4}" maxlength="10"><br><br>

    <label for="state">Estado: *</label>
    <select id="state" name="state" required>
        <option value="">Selecione o estado</option>
    </select><br><br>

    <label for="city">Cidade: *</label>
    <select id="city" name="city" required>
        <option value="">Selecione a cidade</option>
    </select><br><br>

    <input type="submit" value="Enviar Informações">
</form>

<script>
    let selectedStateCode = '';
    let selectedCityCode = '';

    // Função para carregar os estados (UFs) via API do IBGE
    function loadStates() {
        fetch('https://servicodados.ibge.gov.br/api/v1/localidades/estados')
            .then(response => response.json())
            .then(states => {
                const stateSelect = document.getElementById('state');
                states.forEach(state => {
                    const option = document.createElement('option');
                    option.value = state.id;
                    option.text = state.nome;
                    stateSelect.appendChild(option);
                });
            })
            .catch(error => console.error('Erro ao carregar os estados:', error));
    }

    // Função para carregar as cidades com base no estado selecionado via API do IBGE
    function loadCities(stateId) {
        fetch(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${stateId}/municipios`)
            .then(response => response.json())
            .then(cities => {
                const citySelect = document.getElementById('city');
                citySelect.innerHTML = '<option value="">Selecione a cidade</option>'; // Limpa o campo antes de adicionar novas cidades
                cities.forEach(city => {
                    const option = document.createElement('option');
                    option.value = city.id;
                    option.text = city.nome;
                    citySelect.appendChild(option);
                });
            })
            .catch(error => console.error('Erro ao carregar as cidades:', error));
    }

    // Evento ao selecionar o estado para carregar as cidades
    document.getElementById('state').addEventListener('change', function () {
        selectedStateCode = this.value; // Código do estado
        loadCities(selectedStateCode);
    });

    // Evento ao selecionar a cidade para armazenar o código da cidade
    document.getElementById('city').addEventListener('change', function () {
        selectedCityCode = this.value; // Código da cidade
    });

    // Função para aplicar máscara ao telefone
    function applyPhoneMask(phoneField) {
        phoneField.addEventListener('input', function(e) {
            let value = phoneField.value.replace(/\D/g, ''); // Remove todos os caracteres que não são dígitos
            if (value.length > 0) {
                value = value.replace(/^(\d{2})(\d)/g, '($1) $2'); // Aplica a máscara no DDD
            }
            if (value.length > 10) {
                value = value.replace(/(\d{5})(\d{4})$/, '$1-$2'); // Aplica o hífen após os 5 primeiros dígitos
            }
            phoneField.value = value;
        });
    }

    // Aplica a máscara ao campo de telefone
    const phoneInput = document.getElementById('phone');
    applyPhoneMask(phoneInput);

    // Validação da Data de Nascimento no formato DD/MM/AAAA
    const birthdateInput = document.getElementById('birthdate');
    birthdateInput.addEventListener('input', function(e) {
        let value = birthdateInput.value.replace(/\D/g, ''); // Remove caracteres que não são dígitos
        if (value.length > 2) value = value.replace(/^(\d{2})(\d)/g, '$1/$2'); // Adiciona a barra após o dia
        if (value.length > 5) value = value.replace(/(\d{2})\/(\d{2})(\d)/g, '$1/$2/$3'); // Adiciona a barra após o mês
        birthdateInput.value = value;
    });

    // Envio do formulário via POST
    document.getElementById('leadForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Evita o envio padrão do formulário

        const name = document.getElementById('name').value;
        const email = document.getElementById('email').value;
        const phone = document.getElementById('phone').value;
        const birthdate = document.getElementById('birthdate').value;

        const data = {
            name: name,
            phone: phone,
            email: email,
            birthdate: birthdate,
            state: selectedStateCode, // Código do estado
            city: selectedCityCode    // Código da cidade
        };

        fetch('https://gsysadm.com/api/28332786000163/lead?token=77qxyf9a6dyqpj7is157godoj8o75w', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
        .then(response => response.json())
        .then(result => {
            if (result.error && result.error === 'Error: Cliente já cadastrado') {
                alert('CLIENTE JÁ CADASTRADO');
            } else {
                // Redirecionamento para outra página após o envio bem-sucedido
                window.location.href = 'https://20ksemijoias.com.br/pgObrigado'; // Coloque a URL de destino
            }
        })
        .catch(error => {
            console.error('Erro:', error);
            alert('Ocorreu um erro ao enviar os dados.');
        });
    });

    // Carregar estados ao abrir a página
    window.onload = loadStates;
</script>
